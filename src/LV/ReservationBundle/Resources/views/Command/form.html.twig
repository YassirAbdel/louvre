{# src/OC/PlatformBundle/Resources/views/Advert/form.html.twig #}

<div class="well">
    <h3>Votre commande</h3>

  {{ form_start(form, {'attr': {'class': 'form-horizontal'}}) }}

  {# Les erreurs générales du formulaire. #}
  {{ form_errors(form) }}

  {# Génération du label + error + widget pour un champ. #}
  
  {% if form.bookingDate is defined %}
    {{form_row(form.bookingDate, { 'label': 'Date de la visite' }) }}
  {% endif %}

  {# Génération manuelle et éclatée : #}
  
  <div class="form-group">
    {{ form_label(form.numberTickets, "Nombre de billets", {'label_attr': {'class': 'col-sm-2 control-label'}}) }}
    {{ form_errors(form.numberTickets) }}
    <div class="col-sm-5">
      {{ form_widget(form.numberTickets, {'attr': {'class': 'form-control'}}) }}
    </div>
  </div>
    
  <div class="form-group">
    {{ form_label(form.ticketsType, "Type de billets", {'label_attr': {'class': 'col-sm-2 control-label'}}) }}
    {{ form_errors(form.ticketsType) }}
    <div class="col-sm-5">
      {{ form_widget(form.ticketsType, {'attr': {'class': 'form-control'}}) }}
    </div>
  </div>
  
  <div class="form-group">
    {{ form_label(form.email, "Votre Email", {'label_attr': {'class': 'col-sm-2 control-label'}}) }}
    {{ form_errors(form.email) }}
    <div class="col-sm-5">
      {{ form_widget(form.email, {'attr': {'class': 'form-control'}}) }}
    </div>
  </div>
  <h3>Vos billets</h3> 
  {% if form.tickets is defined %}{{ form_row(form.tickets,{'label': ' '}) }}{% endif %}
  <a href="#" id="add_ticket" class="btn btn-default">Ajouter un ticket</a>
<script type="text/javascript">
    $(document).ready(function() {
    
    });
    // On récupère la balise <div> en question qui contient l'attribut « data-prototype » qui nous intéresse.
    var $container = $('div#lv_reservationbundle_command_tickets');

    // On définit un compteur unique pour nommer les champs qu'on va ajouter dynamiquement
    var index = $container.find(':input').length;

    // On ajoute un nouveau champ à chaque clic sur le lien d'ajout.
    $('#add_ticket').click(function(e) {
      addticket($container);

      e.preventDefault(); // évite qu'un # apparaisse dans l'URL
      return false;
    });

    // On ajoute un premier champ automatiquement s'il n'en existe pas déjà un (cas d'une nouvelle annonce par exemple).
    if (index == 0) {
      addticket($container);
    } else {
      // S'il existe déjà des catégories, on ajoute un lien de suppression pour chacune d'entre elles
      $container.children('div').each(function() {
        addDeleteLink($(this));
      });
    }

    // La fonction qui ajoute un formulaire ticketType
    function addticket($container) {
      // Dans le contenu de l'attribut « data-prototype », on remplace :
      // - le texte "__name__label__" qu'il contient par le label du champ
      // - le texte "__name__" qu'il contient par le numéro du champ
      var template = $container.attr('data-prototype')
        .replace(/__name__label__/g, 'Billet n°' + (index+1))
        .replace(/__name__/g,        index)
      ;

      // On crée un objet jquery qui contient ce template
      var $prototype = $(template);

      // On ajoute au prototype un lien pour pouvoir supprimer la catégorie
      addDeleteLink($prototype);

      // On ajoute le prototype modifié à la fin de la balise <div>
      $container.append($prototype);

      // Enfin, on incrémente le compteur pour que le prochain ajout se fasse avec un autre numéro
      index++;
    }

    // La fonction qui ajoute un lien de suppression d'une catégorie
    function addDeleteLink($prototype) {
      // Création du lien
      var $deleteLink = $('<a href="#" class="btn btn-danger">Supprimer</a>');

      // Ajout du lien
      $prototype.append($deleteLink);

      // Ajout du listener sur le clic du lien pour effectivement supprimer la catégorie
      $deleteLink.click(function(e) {
        $prototype.remove();

        e.preventDefault(); // évite qu'un # apparaisse dans l'URL
        return false;
      });
    }
    // Datepicker
    //jQuery(document).ready(function() {
    var holiDays = [
             
          [2018,04,20,'Service'],[2018,04,21,'Service'],[2018,04,22,'Service']

               ];
     // set holidays function which is configured in beforeShowDay

 function setHoliDays(date) {
   for (i = 0; i < holiDays.length; i++) {
     if (date.getFullYear() == holiDays[i][0]
          && date.getMonth() == holiDays[i][1] - 1
          && date.getDate() == holiDays[i][2]) {
        return [true, 'holiday', holiDays[i][3]];
     }
   }
  return [true, ''];
}

$.fn.datepicker.dates['fr'] = {
    days: ["Sunday", "Lundi", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
    daysShort: ["Sun", "Lun", "Tue", "Wed", "Thu", "Fri", "Sat"],
    daysMin: ["Dim", "Lun", "Mar", "Mer", "Jeu", "Ven", "Sam"],
    months: ["Janvier", "Février", "Mars", "Avril", "Mai", "Juin", "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre"],
    monthsShort: ["Jan", "Feb", "Mar", "Avr", "Mai", "Juin", "Juil", "Aou", "Sep", "Oct", "Nov", "Dec"],
    today: "Today",
    clear: "Clear",
    format: "dd/mm/yyyy",
    titleFormat: "MM yyyy", /* Leverages same syntax as 'format' */
    weekStart: 0
};

         $('.js-datepicker').datepicker({
           autoclose: true,
           startView: "1",
           weekStart: "1",
           language: "fr",
           daysOfWeekDisabled: "0",
           datesDisabled: ['01/05/2018', '08/05/2018', '21/05/2018', '14/07/2018'],
           todayHighlight: true,
           startDate: "today"
           }).attr("readonly","readonly");
</script>

  
  {# Pour le bouton, pas de label ni d'erreur, on affiche juste le widget #}
  {# form_widget(form.save, {'attr': {'class': 'btn btn-primary' }}) #}

  {# Génération automatique des champs pas encore écrits.
     Dans cet exemple, ce serait le champ CSRF (géré automatiquement par Symfony !)
     et tous les champs cachés (type « hidden »). #}
  {{ form_rest(form) }}

  {# Fermeture de la balise <form> du formulaire HTML #}
  {{ form_end(form) }}
</div>